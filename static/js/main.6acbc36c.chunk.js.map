{"version":3,"sources":["Clock.js","App.js","serviceWorker.js","index.js"],"names":["Clock","props","clockInterval","handleDate","bind","state","hours","minutes","seconds","this","setInterval","clearInterval","secondsStyle","transform","minutesStyle","hoursStyle","title","className","style","datediff","date","Date","setHours","getHours","formatTime","getMinutes","getSeconds","setState","time","React","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SAGqBA,G,kBAEjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAFVC,cAAgB,GAGZ,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,MAAQ,CACTC,MAAO,GACPC,QAAS,GACTC,QAAS,IANE,E,iFAWfC,KAAKP,cAAgBQ,YAAYD,KAAKN,WAAY,O,6CAIlDQ,cAAcF,KAAKP,iB,+BAGb,IAAD,EAC+BO,KAAKJ,MAAjCC,EADH,EACGA,MAAOC,EADV,EACUA,QAASC,EADnB,EACmBA,QAClBI,EAAe,CACjBC,UAAU,UAAD,OAAsB,EAAVL,EAAZ,SAEPM,EAAe,CACjBD,UAAU,UAAD,OAAsB,EAAVN,EAAZ,SAEPQ,EAAa,CACfF,UAAU,UAAD,OAAoB,GAARP,EAAZ,SAELU,EAAUP,KAAKR,MAAfe,MACR,OACI,uBAAKC,UAAW,SACZ,0BAAKD,GACL,uBAAKC,UAAW,gBACZ,uBAAKA,UAAW,eAAgBC,MAAON,IACvC,uBAAKK,UAAW,eAAgBC,MAAOJ,IACvC,uBAAKG,UAAW,aAAcC,MAAOH,KAEzC,uBAAKE,UAAW,iBACXX,EADL,IACaC,EADb,IACuBC,M,mCAMrB,IACFW,EAAaV,KAAKR,MAAlBkB,SACFC,EAAO,IAAIC,KACjBD,EAAKE,SAASF,EAAKG,WAAaJ,GAChC,IAAIb,EAAQG,KAAKe,WAAWJ,EAAKG,YAC7BhB,EAAUE,KAAKe,WAAWJ,EAAKK,cAC/BjB,EAAUC,KAAKe,WAAWJ,EAAKM,cACnCjB,KAAKkB,SAAS,CAAErB,QAAOC,UAASC,c,iCAGzBoB,GACP,OAAOA,EAAO,GAAP,WAAgBA,GAASA,M,GA1DLC,c,MCapBC,MAZf,WACE,OACI,yBAAKb,UAAU,OACb,8BAAM,kBAAC,EAAD,CAAOD,MAAM,cAAcG,UAAW,KAC5C,8BAAM,kBAAC,EAAD,CAAOH,MAAM,UAAUG,SAAU,KACvC,8BAAM,kBAAC,EAAD,CAAOH,MAAM,WAAWG,SAAU,KACxC,8BAAM,kBAAC,EAAD,CAAOH,MAAM,SAASG,SAAU,KACtC,8BAAM,kBAAC,EAAD,CAAOH,MAAM,SAASG,SAAU,KACtC,8BAAM,kBAAC,EAAD,CAAOH,MAAM,QAAQG,SAAU,OCAzBY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6acbc36c.chunk.js","sourcesContent":["import * as React from \"react\";\nimport \"./clock.css\"\n\nexport default class Clock extends React.Component {\n    clockInterval = \"\";\n    constructor(props) {\n        super(props);\n        this.handleDate = this.handleDate.bind(this);\n        this.state = {\n            hours: \"\",\n            minutes: \"\",\n            seconds: \"\"\n        };\n    }\n\n    componentDidMount() {\n        this.clockInterval = setInterval(this.handleDate, 1000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.clockInterval);\n    }\n\n    render() {\n        const { hours, minutes, seconds } = this.state;\n        const secondsStyle = {\n            transform: `rotate(${seconds * 6}deg)`\n        };\n        const minutesStyle = {\n            transform: `rotate(${minutes * 6}deg)`\n        };\n        const hoursStyle = {\n            transform: `rotate(${hours * 30}deg)`\n        };\n        const { title } = this.props;\n        return (\n            <div className={\"clock\"}>\n                <h3>{title}</h3>\n                <div className={\"analog-clock\"}>\n                    <div className={\"dial seconds\"} style={secondsStyle} />\n                    <div className={\"dial minutes\"} style={minutesStyle} />\n                    <div className={\"dial hours\"} style={hoursStyle} />\n                </div>\n                <div className={\"digital-clock\"}>\n                    {hours}:{minutes}:{seconds}\n                </div>\n            </div>\n        );\n    }\n\n    handleDate() {\n        const { datediff } = this.props;\n        const date = new Date();\n        date.setHours(date.getHours() + datediff);\n        let hours = this.formatTime(date.getHours());\n        let minutes = this.formatTime(date.getMinutes());\n        let seconds = this.formatTime(date.getSeconds());\n        this.setState({ hours, minutes, seconds });\n    }\n\n    formatTime(time) {\n        return time < 10 ? `0${time}` : time;\n    }\n}","import React from 'react';\nimport Clock from \"./Clock\"\nimport './App.css';\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <span><Clock title=\"Los Angeles\" datediff={-2} /></span>\n        <span><Clock title=\"Chicago\" datediff={0} /></span>\n        <span><Clock title=\"New York\" datediff={1} /></span>\n        <span><Clock title=\"London\" datediff={5} /></span>\n        <span><Clock title=\"Moscow\" datediff={8} /></span>\n        <span><Clock title=\"Tokyo\" datediff={9} /></span>\n      </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}